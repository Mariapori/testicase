package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

type AutoGenerated struct {
	Latitude             float64 `json:"latitude"`
	Longitude            float64 `json:"longitude"`
	GenerationtimeMs     float64 `json:"generationtime_ms"`
	UtcOffsetSeconds     int     `json:"utc_offset_seconds"`
	Timezone             string  `json:"timezone"`
	TimezoneAbbreviation string  `json:"timezone_abbreviation"`
	Elevation            float64 `json:"elevation"`
	CurrentWeather       struct {
		Temperature   float64 `json:"temperature"`
		Windspeed     float64 `json:"windspeed"`
		Winddirection float64 `json:"winddirection"`
		Weathercode   int     `json:"weathercode"`
		IsDay         int     `json:"is_day"`
		Time          string  `json:"time"`
	} `json:"current_weather"`
	HourlyUnits struct {
		Time               string `json:"time"`
		Temperature2M      string `json:"temperature_2m"`
		Relativehumidity2M string `json:"relativehumidity_2m"`
		Windspeed10M       string `json:"windspeed_10m"`
	} `json:"hourly_units"`
	Hourly struct {
		Time               []string  `json:"time"`
		Temperature2M      []float64 `json:"temperature_2m"`
		Relativehumidity2M []int     `json:"relativehumidity_2m"`
		Windspeed10M       []float64 `json:"windspeed_10m"`
	} `json:"hourly"`
}

type AutoGenerated2 struct {
	Query       string  `json:"query"`
	Status      string  `json:"status"`
	Country     string  `json:"country"`
	CountryCode string  `json:"countryCode"`
	Region      string  `json:"region"`
	RegionName  string  `json:"regionName"`
	City        string  `json:"city"`
	Zip         string  `json:"zip"`
	Lat         float64 `json:"lat"`
	Lon         float64 `json:"lon"`
	Timezone    string  `json:"timezone"`
	Isp         string  `json:"isp"`
	Org         string  `json:"org"`
	As          string  `json:"as"`
}

func main() {
	fmt.Println("Gettings details..")
	GetWeather()
}

func GetWeather() {
	locationDetails := GetLocation()
	apiUrl := fmt.Sprintf("https://api.open-meteo.com/v1/forecast?latitude=%f&longitude=%f&current_weather=true&hourly=temperature_2m,relativehumidity_2m,windspeed_10m", locationDetails.Lat, locationDetails.Lon)
	resp, err := http.Get(apiUrl)
	if err != nil {
		panic(err)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	var weatherData AutoGenerated
	json.Unmarshal(body, &weatherData)
	fmt.Println("Weather data")
	fmt.Println("Time:", weatherData.CurrentWeather.Time)
	fmt.Println("Temperature:", weatherData.CurrentWeather.Temperature, "C")
	fmt.Println("Windspeed:", weatherData.CurrentWeather.Windspeed, "m/s")
	fmt.Println("Wind direction:", weatherData.CurrentWeather.Winddirection, "Â°")
	fmt.Println("Weathercode:", weatherData.CurrentWeather.Weathercode)
	fmt.Println("IsDay:", weatherData.CurrentWeather.IsDay)
}

func GetLocation() AutoGenerated2 {
	resp, err := http.Get("http://ip-api.com/json/")
	if err != nil {
		panic(err)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	var locationData AutoGenerated2
	json.Unmarshal(body, &locationData)
	return locationData
}
